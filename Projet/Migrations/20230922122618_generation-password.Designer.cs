// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projet.Data;

#nullable disable

namespace Projet.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230922122618_generation-password")]
    partial class generationpassword
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Projet.Areas.Admin.Models.Departement", b =>
                {
                    b.Property<int>("IdDepartement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDepartement"));

                    b.Property<string>("NomDepartementt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDepartement");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("Projet.Areas.Admin.Models.Enseignant", b =>
                {
                    b.Property<int>("IdEnseignant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEnseignant"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeEnseignant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDepartement")
                        .HasColumnType("int");

                    b.Property<string>("NomEnseignant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrenomEnseignant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialiteEnseignant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEnseignant");

                    b.HasIndex("IdDepartement");

                    b.ToTable("Enseignants");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExam", b =>
                {
                    b.Property<int>("IdEmploiExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmploiExam"));

                    b.Property<int?>("IdExamen")
                        .HasColumnType("int");

                    b.Property<int?>("IdJour")
                        .HasColumnType("int");

                    b.Property<int?>("IdMatiere")
                        .HasColumnType("int");

                    b.Property<int?>("IdNiveau")
                        .HasColumnType("int");

                    b.Property<int?>("IdSeance")
                        .HasColumnType("int");

                    b.Property<int?>("IdSemestre")
                        .HasColumnType("int");

                    b.Property<string>("typeEmploi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmploiExam");

                    b.HasIndex("IdExamen");

                    b.HasIndex("IdJour");

                    b.HasIndex("IdMatiere");

                    b.HasIndex("IdNiveau");

                    b.HasIndex("IdSeance");

                    b.HasIndex("IdSemestre");

                    b.ToTable("EmploiExams");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExamEnseignant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEmploiExam")
                        .HasColumnType("int");

                    b.Property<int>("IdEnseignant")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmploiExam");

                    b.HasIndex("IdEnseignant");

                    b.ToTable("EmploiExamEnseignants");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExamLocal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEmploiExam")
                        .HasColumnType("int");

                    b.Property<int>("IdLocal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmploiExam");

                    b.HasIndex("IdLocal");

                    b.ToTable("EmploiExamLocals");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExamVacataire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEmploiExam")
                        .HasColumnType("int");

                    b.Property<int>("IdVacataire")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmploiExam");

                    b.HasIndex("IdVacataire");

                    b.ToTable("EmploiExamVacataires");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiTemps", b =>
                {
                    b.Property<int>("IdEmploi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmploi"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdEnseignant")
                        .HasColumnType("int");

                    b.Property<int?>("IdGroupe")
                        .HasColumnType("int");

                    b.Property<int?>("IdJour")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocal")
                        .HasColumnType("int");

                    b.Property<int?>("IdMatiere")
                        .HasColumnType("int");

                    b.Property<int>("IdNiveau")
                        .HasColumnType("int");

                    b.Property<int?>("IdSeance")
                        .HasColumnType("int");

                    b.Property<int?>("IdSemestre")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypeEnseignement")
                        .HasColumnType("int");

                    b.Property<int?>("IdVacataire")
                        .HasColumnType("int");

                    b.Property<int>("SemaineDebut")
                        .HasColumnType("int");

                    b.Property<int>("SemaineFin")
                        .HasColumnType("int");

                    b.HasKey("IdEmploi");

                    b.HasIndex("IdEnseignant");

                    b.HasIndex("IdGroupe");

                    b.HasIndex("IdJour");

                    b.HasIndex("IdLocal");

                    b.HasIndex("IdMatiere");

                    b.HasIndex("IdNiveau");

                    b.HasIndex("IdSeance");

                    b.HasIndex("IdSemestre");

                    b.HasIndex("IdTypeEnseignement");

                    b.HasIndex("IdVacataire");

                    b.ToTable("EmploiTemps");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Examen", b =>
                {
                    b.Property<int>("IdExamen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExamen"));

                    b.Property<DateTime>("DateExamen")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdSemestre")
                        .HasColumnType("int");

                    b.Property<int>("NumeroExamen")
                        .HasColumnType("int");

                    b.HasKey("IdExamen");

                    b.HasIndex("IdSemestre");

                    b.ToTable("Examens");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Jour", b =>
                {
                    b.Property<int>("IdJour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdJour"));

                    b.Property<string>("NomJour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdJour");

                    b.ToTable("Jours");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Local", b =>
                {
                    b.Property<int>("IdLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocal"));

                    b.Property<int?>("CapaciteLocal")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionLocal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomLocal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLocal");

                    b.ToTable("Locals");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Seance", b =>
                {
                    b.Property<int>("IdSeance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSeance"));

                    b.Property<string>("NomSeance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("dateDebut")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("dateFin")
                        .HasColumnType("time");

                    b.HasKey("IdSeance");

                    b.ToTable("Seances");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Semestre", b =>
                {
                    b.Property<int>("IdSemestre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSemestre"));

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomSemestre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemaineDebut")
                        .HasColumnType("int");

                    b.Property<int>("SemaineFin")
                        .HasColumnType("int");

                    b.HasKey("IdSemestre");

                    b.ToTable("semestres");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.TypeEnseignement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeEnseignements");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Filiere", b =>
                {
                    b.Property<int>("IdFiliere")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFiliere"));

                    b.Property<string>("Abreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IdDepartement")
                        .HasColumnType("int");

                    b.Property<string>("NomFiliere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFiliere");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex("IdDepartement");

                    b.ToTable("Filieres");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Groupe", b =>
                {
                    b.Property<int>("IdGroupe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGroupe"));

                    b.Property<int?>("IdNiveau")
                        .HasColumnType("int");

                    b.Property<string>("NomGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGroupe");

                    b.HasIndex("IdNiveau");

                    b.ToTable("Groupes");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Matiere", b =>
                {
                    b.Property<int>("IdMatiere")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMatiere"));

                    b.Property<int?>("IdNiveau")
                        .HasColumnType("int");

                    b.Property<string>("NomMatiere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMatiere");

                    b.HasIndex("IdNiveau");

                    b.ToTable("Matieres");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Niveau", b =>
                {
                    b.Property<int>("IdNiveau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNiveau"));

                    b.Property<int?>("IdFiliere")
                        .HasColumnType("int");

                    b.Property<string>("NomNiveau")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNiveau");

                    b.HasIndex("IdFiliere");

                    b.ToTable("Niveaus");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Vacataire", b =>
                {
                    b.Property<int>("IdVacataire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVacataire"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDepartement")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialité")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdVacataire");

                    b.HasIndex("IdDepartement");

                    b.ToTable("vacataires");
                });

            modelBuilder.Entity("Projet.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdEnseignant")
                        .HasColumnType("int");

                    b.Property<int?>("IdVacataire")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdEnseignant");

                    b.HasIndex("IdVacataire");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Projet.Models.RegisterViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordConfirm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Projet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Projet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Projet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projet.Areas.Admin.Models.Enseignant", b =>
                {
                    b.HasOne("Projet.Areas.Admin.Models.Departement", "departement")
                        .WithMany("Enseignants")
                        .HasForeignKey("IdDepartement");

                    b.Navigation("departement");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExam", b =>
                {
                    b.HasOne("Projet.Areas.Coordonnateur.Models.Examen", "examen")
                        .WithMany("EmploiExamen")
                        .HasForeignKey("IdExamen");

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Jour", "Jour")
                        .WithMany("EmploiExamJour")
                        .HasForeignKey("IdJour");

                    b.HasOne("Projet.Areas.Responsable.Models.Matiere", "matiere")
                        .WithMany("EmploiMatiereExam")
                        .HasForeignKey("IdMatiere");

                    b.HasOne("Projet.Areas.Responsable.Models.Niveau", "niveau")
                        .WithMany("EmploiNiveau")
                        .HasForeignKey("IdNiveau");

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Seance", "Seance")
                        .WithMany("EmploiExamSeance")
                        .HasForeignKey("IdSeance");

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Semestre", "semestre")
                        .WithMany("EmploisExamSemestre")
                        .HasForeignKey("IdSemestre");

                    b.Navigation("Jour");

                    b.Navigation("Seance");

                    b.Navigation("examen");

                    b.Navigation("matiere");

                    b.Navigation("niveau");

                    b.Navigation("semestre");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExamEnseignant", b =>
                {
                    b.HasOne("Projet.Areas.Coordonnateur.Models.EmploiExam", "EmploiExam")
                        .WithMany("EmploiExamEnseignants")
                        .HasForeignKey("IdEmploiExam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projet.Areas.Admin.Models.Enseignant", "Enseignant")
                        .WithMany("EmploiExamEnseignants")
                        .HasForeignKey("IdEnseignant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmploiExam");

                    b.Navigation("Enseignant");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExamLocal", b =>
                {
                    b.HasOne("Projet.Areas.Coordonnateur.Models.EmploiExam", "EmploiExam")
                        .WithMany("EmploiExamLocals")
                        .HasForeignKey("IdEmploiExam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Local", "Local")
                        .WithMany("EmploiExamLocals")
                        .HasForeignKey("IdLocal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmploiExam");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExamVacataire", b =>
                {
                    b.HasOne("Projet.Areas.Coordonnateur.Models.EmploiExam", "EmploiExam")
                        .WithMany("EmploiExamVacataires")
                        .HasForeignKey("IdEmploiExam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projet.Areas.Responsable.Models.Vacataire", "Vacataire")
                        .WithMany("EmploiExamVacataires")
                        .HasForeignKey("IdVacataire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmploiExam");

                    b.Navigation("Vacataire");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiTemps", b =>
                {
                    b.HasOne("Projet.Areas.Admin.Models.Enseignant", "Enseignant")
                        .WithMany("EmploisEnseignat")
                        .HasForeignKey("IdEnseignant");

                    b.HasOne("Projet.Areas.Responsable.Models.Groupe", "Groupe")
                        .WithMany("EmploisGroupe")
                        .HasForeignKey("IdGroupe");

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Jour", "Jour")
                        .WithMany("EmploisJour")
                        .HasForeignKey("IdJour");

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Local", "Local")
                        .WithMany("EmploisLocal")
                        .HasForeignKey("IdLocal");

                    b.HasOne("Projet.Areas.Responsable.Models.Matiere", "Matiere")
                        .WithMany("EmploisMatiere")
                        .HasForeignKey("IdMatiere");

                    b.HasOne("Projet.Areas.Responsable.Models.Niveau", "Niveau")
                        .WithMany("EmploisNiveau")
                        .HasForeignKey("IdNiveau")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Seance", "Seance")
                        .WithMany("EmploisSeance")
                        .HasForeignKey("IdSeance");

                    b.HasOne("Projet.Areas.Coordonnateur.Models.Semestre", "semestre")
                        .WithMany("EmploisSemestre")
                        .HasForeignKey("IdSemestre");

                    b.HasOne("Projet.Areas.Coordonnateur.Models.TypeEnseignement", "TypeEnseignement")
                        .WithMany("EmploisTypeEnseignement")
                        .HasForeignKey("IdTypeEnseignement");

                    b.HasOne("Projet.Areas.Responsable.Models.Vacataire", "Vacataire")
                        .WithMany("EmploisVacataire")
                        .HasForeignKey("IdVacataire");

                    b.Navigation("Enseignant");

                    b.Navigation("Groupe");

                    b.Navigation("Jour");

                    b.Navigation("Local");

                    b.Navigation("Matiere");

                    b.Navigation("Niveau");

                    b.Navigation("Seance");

                    b.Navigation("TypeEnseignement");

                    b.Navigation("Vacataire");

                    b.Navigation("semestre");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Examen", b =>
                {
                    b.HasOne("Projet.Areas.Coordonnateur.Models.Semestre", "semestre")
                        .WithMany("ExamenSemestre")
                        .HasForeignKey("IdSemestre");

                    b.Navigation("semestre");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Filiere", b =>
                {
                    b.HasOne("Projet.Data.ApplicationUser", "ApplicationUser")
                        .WithOne("filiere")
                        .HasForeignKey("Projet.Areas.Responsable.Models.Filiere", "ApplicationUserId");

                    b.HasOne("Projet.Areas.Admin.Models.Departement", "Departement")
                        .WithMany("Filieres")
                        .HasForeignKey("IdDepartement");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Groupe", b =>
                {
                    b.HasOne("Projet.Areas.Responsable.Models.Niveau", "niveau")
                        .WithMany("Groupes")
                        .HasForeignKey("IdNiveau");

                    b.Navigation("niveau");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Matiere", b =>
                {
                    b.HasOne("Projet.Areas.Responsable.Models.Niveau", "niveau")
                        .WithMany("Matieres")
                        .HasForeignKey("IdNiveau");

                    b.Navigation("niveau");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Niveau", b =>
                {
                    b.HasOne("Projet.Areas.Responsable.Models.Filiere", "filiere")
                        .WithMany("Niveaus")
                        .HasForeignKey("IdFiliere");

                    b.Navigation("filiere");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Vacataire", b =>
                {
                    b.HasOne("Projet.Areas.Admin.Models.Departement", "departement")
                        .WithMany("Vacataires")
                        .HasForeignKey("IdDepartement");

                    b.Navigation("departement");
                });

            modelBuilder.Entity("Projet.Data.ApplicationUser", b =>
                {
                    b.HasOne("Projet.Areas.Admin.Models.Enseignant", "Enseignant")
                        .WithMany("CompteEnseignat")
                        .HasForeignKey("IdEnseignant");

                    b.HasOne("Projet.Areas.Responsable.Models.Vacataire", "Vacataire")
                        .WithMany("CompteVacataire")
                        .HasForeignKey("IdVacataire");

                    b.Navigation("Enseignant");

                    b.Navigation("Vacataire");
                });

            modelBuilder.Entity("Projet.Areas.Admin.Models.Departement", b =>
                {
                    b.Navigation("Enseignants");

                    b.Navigation("Filieres");

                    b.Navigation("Vacataires");
                });

            modelBuilder.Entity("Projet.Areas.Admin.Models.Enseignant", b =>
                {
                    b.Navigation("CompteEnseignat");

                    b.Navigation("EmploiExamEnseignants");

                    b.Navigation("EmploisEnseignat");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.EmploiExam", b =>
                {
                    b.Navigation("EmploiExamEnseignants");

                    b.Navigation("EmploiExamLocals");

                    b.Navigation("EmploiExamVacataires");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Examen", b =>
                {
                    b.Navigation("EmploiExamen");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Jour", b =>
                {
                    b.Navigation("EmploiExamJour");

                    b.Navigation("EmploisJour");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Local", b =>
                {
                    b.Navigation("EmploiExamLocals");

                    b.Navigation("EmploisLocal");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Seance", b =>
                {
                    b.Navigation("EmploiExamSeance");

                    b.Navigation("EmploisSeance");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.Semestre", b =>
                {
                    b.Navigation("EmploisExamSemestre");

                    b.Navigation("EmploisSemestre");

                    b.Navigation("ExamenSemestre");
                });

            modelBuilder.Entity("Projet.Areas.Coordonnateur.Models.TypeEnseignement", b =>
                {
                    b.Navigation("EmploisTypeEnseignement");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Filiere", b =>
                {
                    b.Navigation("Niveaus");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Groupe", b =>
                {
                    b.Navigation("EmploisGroupe");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Matiere", b =>
                {
                    b.Navigation("EmploiMatiereExam");

                    b.Navigation("EmploisMatiere");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Niveau", b =>
                {
                    b.Navigation("EmploiNiveau");

                    b.Navigation("EmploisNiveau");

                    b.Navigation("Groupes");

                    b.Navigation("Matieres");
                });

            modelBuilder.Entity("Projet.Areas.Responsable.Models.Vacataire", b =>
                {
                    b.Navigation("CompteVacataire");

                    b.Navigation("EmploiExamVacataires");

                    b.Navigation("EmploisVacataire");
                });

            modelBuilder.Entity("Projet.Data.ApplicationUser", b =>
                {
                    b.Navigation("filiere");
                });
#pragma warning restore 612, 618
        }
    }
}
